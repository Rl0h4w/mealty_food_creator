import math
import re
import logging
from typing import List, Optional, Dict, Tuple, Set

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

import pandas as pd

from database import Database
from scraper import Scraper
from optimization import (
    calculate_bmr,
    calculate_bmr_harris_benedict,
    calculate_daily_calories,
    calculate_macros,
    format_diet_text,
    find_all_solutions,
)
from keyboards import (
    yes_no_inline_keyboard,
    gender_inline_keyboard,
    activity_level_inline_keyboard,
    goal_inline_keyboard,
    confirm_inline_keyboard,
)

DATABASE = "products.db"

logger = logging.getLogger(__name__)

# Define FSM States
class Form(StatesGroup):
    weight = State()
    height = State()
    age = State()
    gender = State()
    body_fat_known = State()
    body_fat_percentage = State()
    waist = State()
    neck = State()
    hip = State()
    activity_level = State()
    goal = State()
    excluded_products = State()
    reviewing_day = State()

# Initialize Dispatcher and Router
router = Router()

@router.message(Command(commands=['start']))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.weight)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è.\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /cancel.\n\n"
        "üìä <b>–®–∞–≥ 1 –∏–∑ 7</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70.5):"
    )

@router.message(Command(commands=['help']))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ü–µ–ª–µ–π.\n\n"
        "–ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –º–æ–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å"
    )

@router.message(Command(commands=['cancel']))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())

@router.message(StateFilter(Form.weight))
async def process_weight(message: Message, state: FSMContext):
    try:
        user_weight = float(message.text.strip().replace(',', '.'))
        if not (30 <= user_weight <= 300):
            raise ValueError("–í–µ—Å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(weight=user_weight)
        await state.set_state(Form.height)
        await message.answer(
            "üìè <b>–®–∞–≥ 2 –∏–∑ 7</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300 –∫–≥).")

@router.message(StateFilter(Form.height))
async def process_height(message: Message, state: FSMContext):
    try:
        user_height = float(message.text.strip().replace(',', '.'))
        if not (100 <= user_height <= 250):
            raise ValueError("–†–æ—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(height=user_height)
        await state.set_state(Form.age)
        await message.answer(
            "üéÇ <b>–®–∞–≥ 3 –∏–∑ 7</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):"
        )
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250 —Å–º).")

@router.message(StateFilter(Form.age))
async def process_age(message: Message, state: FSMContext):
    try:
        user_age = int(re.findall(r'\d+', message.text.strip())[0])
        if not (5 <= user_age <= 120):
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(age=user_age)
        await state.set_state(Form.gender)
        await message.answer(
            "üöª <b>–®–∞–≥ 4 –∏–∑ 7</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=gender_inline_keyboard()
        )
    except (ValueError, IndexError):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 120).")

@router.callback_query(StateFilter(Form.gender), lambda c: c.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    await state.update_data(gender=gender)
    await state.set_state(Form.body_fat_known)
    await callback.message.edit_text(
        "üîç <b>–®–∞–≥ 5 –∏–∑ 7</b>\n"
        "–ò–∑–≤–µ—Å—Ç–µ–Ω –ª–∏ –≤–∞–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –≤–∞—à–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º–µ?",
        reply_markup=yes_no_inline_keyboard()
    )

@router.callback_query(StateFilter(Form.body_fat_known), lambda c: c.data in ["yes", "no"])
async def process_body_fat_known(callback: CallbackQuery, state: FSMContext):
    answer = callback.data
    if answer == "yes":
        await state.set_state(Form.body_fat_percentage)
        await callback.message.edit_text(
            "üíØ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –≤–∞—à–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.5):"
        )
    else:
        data = await state.get_data()
        if data.get('gender') == 'female':
            await state.set_state(Form.hip)
            await callback.message.edit_text("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
        else:
            await state.set_state(Form.waist)
            await callback.message.edit_text("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")

@router.message(StateFilter(Form.body_fat_percentage))
async def process_body_fat_percentage(message: Message, state: FSMContext):
    try:
        body_fat_percentage = float(message.text.strip().replace(',', '.'))
        if not (0 < body_fat_percentage < 100):
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(body_fat_percentage=body_fat_percentage)
        await message.answer(f'üìä –í–∞—à –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ: {body_fat_percentage:.2f}%')
        await ask_activity_level(message, state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).")

@router.message(StateFilter(Form.waist))
async def process_waist(message: Message, state: FSMContext):
    try:
        waist = float(message.text.strip().replace(',', '.'))
        if not (30 <= waist <= 200):
            raise ValueError("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(waist=waist)
        await state.set_state(Form.neck)
        await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç —à–µ–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏ (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 200 —Å–º).")

@router.message(StateFilter(Form.neck))
async def process_neck(message: Message, state: FSMContext):
    try:
        neck = float(message.text.strip().replace(',', '.'))
        if not (10 <= neck <= 100):
            raise ValueError("–û–±—Ö–≤–∞—Ç —à–µ–∏ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(neck=neck)
        data = await state.get_data()
        if data['gender'] == 'female':
            await state.set_state(Form.hip)
            await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
        else:
            await calculate_body_fat_percentage(state, message)
            await ask_activity_level(message, state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ —à–µ–∏ (—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 100 —Å–º).")

@router.message(StateFilter(Form.hip))
async def process_hip(message: Message, state: FSMContext):
    try:
        hip = float(message.text.strip().replace(',', '.'))
        if not (20 <= hip <= 200):
            raise ValueError("–û–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        await state.update_data(hip=hip)
        # Calculate body fat percentage for females
        await calculate_body_fat_percentage(state, message)
        await ask_activity_level(message, state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ö–≤–∞—Ç–∞ –±—ë–¥–µ—Ä (—á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 200 —Å–º).")

async def calculate_body_fat_percentage(state: FSMContext, message: Message):
    data = await state.get_data()
    try:
        if data['gender'] == 'male':
            waist = data['waist']
            neck = data['neck']
            height = data['height']
            if waist - neck <= 0 or height <= 0:
                raise ValueError
            body_fat_percentage = 495 / (
                1.0324 - 0.19077 * math.log10(waist - neck) + 0.15456 * math.log10(height)
            ) - 450
        else:
            waist = data['waist']
            neck = data['neck']
            hip = data.get('hip')
            height = data['height']
            if waist + hip - neck <= 0 or height <= 0:
                raise ValueError
            body_fat_percentage = 495 / (
                1.29579 - 0.35004 * math.log10(waist + hip - neck) + 0.22100 * math.log10(height)
            ) - 450
        body_fat_percentage = max(0, min(body_fat_percentage, 100))  # Clamp between 0 and 100
        await state.update_data(body_fat_percentage=body_fat_percentage)
        await message.answer(f'üìä –í–∞—à –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ: {body_fat_percentage:.2f}%')
    except (ValueError, KeyError):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        await state.clear()

async def ask_activity_level(message: Message, state: FSMContext):
    await state.set_state(Form.activity_level)
    await message.answer(
        "üèÉ <b>–®–∞–≥ 6 –∏–∑ 7</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=activity_level_inline_keyboard()
    )

@router.callback_query(StateFilter(Form.activity_level), lambda c: c.data.startswith("activity_"))
async def process_activity_level(callback: CallbackQuery, state: FSMContext):
    activity_levels = {
        "activity_sedentary": "sedentary",
        "activity_light": "lightly_active",
        "activity_moderate": "moderately_active",
        "activity_high": "very_active",
        "activity_extra": "extra_active",
    }
    activity_level = activity_levels.get(callback.data)
    if activity_level:
        await state.update_data(activity_level=activity_level)
        await state.set_state(Form.goal)
        await callback.message.edit_text(
            "üéØ <b>–®–∞–≥ 7 –∏–∑ 7</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=goal_inline_keyboard()
        )
    else:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 5.")

@router.callback_query(StateFilter(Form.goal), lambda c: c.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    goals = {
        "goal_lose_weight": "lose_weight",
        "goal_maintain_weight": "maintain_weight",
        "goal_gain_weight": "gain_weight",
    }
    goal = goals.get(callback.data)
    if goal:
        await state.update_data(goal=goal)
        await state.set_state(Form.excluded_products)
        await callback.message.edit_text(
            "üçΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'."
        )
    else:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")

@router.message(StateFilter(Form.excluded_products))
async def process_excluded_products(message: Message, state: FSMContext):
    excluded_products = (
        [name.strip() for name in message.text.split(",")]
        if message.text.lower().strip() != "–Ω–µ—Ç"
        else []
    )
    await state.update_data(excluded_products=excluded_products)
    await message.answer(
        "‚è≥ –°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞—é —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        reply_markup=ReplyKeyboardRemove(),
    )

    db = Database(DATABASE)
    await db.initialize()

    needs_update = await db.needs_update()
    if needs_update:
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö...")
        async with Scraper() as scraper:
            products_df = await scraper.parse_products()
        if not products_df.empty:
            await db.save_products(products_df)
            logger.info("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
            await state.clear()
            return
    else:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        products_df = await db.load_products()

    if products_df.empty:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
        await state.clear()
        return

    await state.update_data(products_df=products_df)
    await generate_weekly_plan(message, state)

async def generate_weekly_plan(message: Message, state: FSMContext):
    data = await state.get_data()
    proteins_target = data.get('proteins_target')
    fats_target = data.get('fats_target')
    carbs_target = data.get('carbs_target')
    daily_calories = data.get('daily_calories')

    if not all([proteins_target, fats_target, carbs_target, daily_calories]):
        # Perform calculations
        weight = data['weight']
        body_fat_percentage = data.get('body_fat_percentage')
        gender = data['gender']
        height = data['height']
        age = data['age']
        activity_level = data['activity_level']
        goal = data['goal']

        if body_fat_percentage is not None:
            bmr = calculate_bmr(weight, body_fat_percentage)
        else:
            bmr = calculate_bmr_harris_benedict(gender, weight, height, age)

        daily_calories = calculate_daily_calories(bmr, activity_level)
        proteins_target, fats_target, carbs_target = calculate_macros(weight, daily_calories, goal)

        await state.update_data(
            proteins_target=proteins_target,
            fats_target=fats_target,
            carbs_target=carbs_target,
            daily_calories=daily_calories
        )

    await message.answer(
        f"üìä <b>–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏:</b>\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {daily_calories:.2f} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {proteins_target:.2f} –≥\n"
        f"–ñ–∏—Ä—ã: {fats_target:.2f} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs_target:.2f} –≥"
    )

    # Initialize weekly plan
    weekly_plan = []
    await state.update_data(weekly_plan=weekly_plan, current_day=1, rejected_solutions=set(), attempts={})

    # Proceed to first day
    await state.set_state(Form.reviewing_day)
    await present_day_plan(message, state)

async def present_day_plan(message: Message, state: FSMContext):
    data = await state.get_data()
    current_day = data['current_day']
    weekly_plan = data['weekly_plan']
    rejected_solutions = data.get('rejected_solutions', set())
    attempts = data.get('attempts', {})
    products_df = data['products_df']
    proteins_target = data['proteins_target']
    fats_target = data['fats_target']
    carbs_target = data['carbs_target']
    daily_calories = data['daily_calories']
    excluded_products = data['excluded_products']

    solutions = await find_all_solutions(
        products_df,
        proteins_target,
        fats_target,
        carbs_target,
        daily_calories,
        excluded_products,
        rejected_solutions,
        day=current_day
    )

    if solutions:
        sol = solutions[0]
        diet = sol['products']
        await state.update_data(current_solution=sol)
        diet_text = format_diet_text(
            diet,
            proteins_target,
            fats_target,
            carbs_target,
            daily_calories,
            sol['total_cost'],
            current_day
        )
        await message.answer(
            f"{diet_text}\n\n–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —ç—Ç–æ—Ç —Ä–∞—Ü–∏–æ–Ω?",
            reply_markup=confirm_inline_keyboard()
        )
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å {current_day}.")
        weekly_plan.append({
            'day': current_day,
            'diet': None,
            'total_cost': 0
        })
        if current_day < 7:
            await state.update_data(current_day=current_day + 1, weekly_plan=weekly_plan)
            await present_day_plan(message, state)
        else:
            await show_final_plan(message, state)

@router.callback_query(StateFilter(Form.reviewing_day), lambda c: c.data in ["accept", "reject"])
async def process_day_review(callback: CallbackQuery, state: FSMContext):
    user_response = callback.data
    data = await state.get_data()
    current_day = data['current_day']
    weekly_plan = data.get('weekly_plan', [])
    rejected_solutions = data.get('rejected_solutions', set())
    attempts = data.get('attempts', {})
    current_solution = data.get('current_solution')

    if user_response == 'accept':
        # Accept the diet
        weekly_plan.append({
            'day': current_day,
            'diet': current_solution['products'],
            'total_cost': current_solution['total_cost']
        })
    else:
        # Reject the diet
        rejected_solutions.add(current_solution['ids'])  # ids —É–∂–µ –∫–æ—Ä—Ç–µ–∂
        attempts[current_day] = attempts.get(current_day, 0) + 1
        if attempts[current_day] < 5:
            await state.update_data(rejected_solutions=rejected_solutions, attempts=attempts)
            await callback.message.edit_text("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...")
            await present_day_plan(callback.message, state)
            return
        else:
            await callback.message.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å {current_day}.")
            weekly_plan.append({
                'day': current_day,
                'diet': None,
                'total_cost': 0
            })

    # Update state
    await state.update_data(weekly_plan=weekly_plan, rejected_solutions=rejected_solutions, attempts=attempts)

    # Proceed to next day or finish
    if current_day < 7:
        await state.update_data(current_day=current_day + 1)
        await present_day_plan(callback.message, state)
    else:
        await show_final_plan(callback.message, state)

async def show_final_plan(message: Message, state: FSMContext):
    data = await state.get_data()
    weekly_plan = data.get('weekly_plan', [])
    total_cost = sum(day['total_cost'] for day in weekly_plan)

    final_text = "üìÖ <b>–í–∞—à –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:</b>\n\n"
    for day in weekly_plan:
        day_num = day['day']
        diet = day['diet']
        if diet is not None:
            diet_text = format_diet_text(
                diet,
                data['proteins_target'],
                data['fats_target'],
                data['carbs_target'],
                data['daily_calories'],
                day['total_cost'],
                day_num
            )
            final_text += f"{diet_text}\n\n"
        else:
            final_text += f"üçΩ <b>–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å {day_num}:</b>\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω.\n\n"

    final_text += f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏: {total_cost:.2f}‚ÇΩ</b>"

    await message.answer(final_text)
    await state.clear()
